// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ride {
  ride_id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug             String
  date             DateTime    @db.Timestamp(6)
  path             String // JSON string to store coordinates
  elevation        String // JSON string to store elevations
  distance         Float
  shortDescription String
  longDescription  String
  staticMapUrl     String?
  difficulty       String
  locationId       Int
  createdAt        DateTime    @default(now()) @db.Timestamp(6)
  updatedAt        DateTime    @updatedAt @db.Timestamp(6)
  user_ride        user_ride[]
  location         location    @relation(fields: [locationId], references: [id])
}

model user {
  userId             String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName          String               @default("NO_FIRST_NAME")
  lastName           String               @default("NO_LAST_NAME")
  email              String               @unique(map: "user_email_idx")
  emailVerified      DateTime?            @db.Timestamp(6)
  image              String?
  password           String?
  locationId         Int?
  role               String               @default("USER")
  createdAt          DateTime             @default(now()) @db.Timestamp(6)
  updatedAt          DateTime             @updatedAt
  account            Account[]
  session            Session[]
  user_ride          user_ride[]
  location           location?            @relation(fields: [locationId], references: [id])
  PasswordResetToken PasswordResetToken[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user user @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         user     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamp(6)

  @@id([identifier, token])
}

model user_ride {
  user_ride_id   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String    @db.Uuid
  ride_id        String    @db.Uuid
  status         String    @default("SIGNED_UP")
  date_signed_up DateTime  @default(now()) @db.Timestamp(6)
  date_completed DateTime?
  user           user      @relation(fields: [user_id], references: [userId], onDelete: Cascade)
  ride           ride      @relation(fields: [ride_id], references: [ride_id], onDelete: Cascade)
}

model state {
  id           Int        @id @default(autoincrement())
  name         String
  abbreviation String     @unique
  locations    location[]
}

model location {
  id      Int    @id @default(autoincrement())
  city    String
  stateId Int
  state   state  @relation(fields: [stateId], references: [id])
  user    user[]
  ride    ride[]
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @db.Uuid
  user      user     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  expires   DateTime
  createdAt DateTime @default(now())
}
